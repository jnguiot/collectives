apiVersion: v1
kind: Secret
metadata:
  name: collectives-secret
type: Opaque
stringData:
  db_password: "zc*z151:ezd7P7!D"
  flask_secret: "la&]p/('\\,&NA\\5S-k%W+~tN"
  admin_password: "f00bar"

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
 name: microbot-ingress
 annotations:
   cert-manager.io/cluster-issuer: lets-encrypt
spec:
 tls:
 - hosts:
   - test2.jnguiot.fr
   secretName: collectives-ingress-tls
 rules:
 - host: test2.jnguiot.fr
   http:
     paths:
     - backend:
         service:
           name: collectives
           port:
             number: 5000
       path: /
       pathType: Prefix
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
 name: lets-encrypt
spec:
 acme:
   email: microk8s@yopmail.com
   server: https://acme-v02.api.letsencrypt.org/directory
   privateKeySecretRef:
     name: lets-encrypt-private-key
   # Add a single challenge solver, HTTP01 using nginx
   solvers:
   - http01:
       ingress:
         class: public
---
apiVersion: v1
kind: Service
metadata:
  name: collectives
  labels:
    app: collectives
spec:
  ports:
    - port: 5000
  selector:
    app: collectives
    tier: frontend
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collectives
  labels:
    app: collectives
spec:
  selector:
    matchLabels:
      app: collectives
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: collectives
        tier: frontend
    spec:
      containers:
        - image: cafannecy/collectives:vx3
          name: collectives
          env:
            - name: ADMINPWD
              valueFrom: 
                secretKeyRef:
                  name: collectives-secret
                  key: admin_password
          ports:
            - containerPort: 5000
              name: collectives
          volumeMounts:
            - name: collectives-persistent-storage
              mountPath: /app/collectives/static/uploads
      volumes:
        - name: collectives-persistent-storage
          persistentVolumeClaim:
            claimName: collective-pv-claim
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: collective-pv-volume
  labels:
    type: local
spec:
  storageClassName: local
  capacity:
    storage: 7Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  hostPath:
    path: "/mnt/data/collectives/uploads"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: collective-pv-claim
spec:
  storageClassName: local
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi


---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:latest
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          valueFrom: 
            secretKeyRef:
              name: collectives-secret
              key: db_password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: local
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  hostPath:
    path: "/mnt/data/mysql"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: local
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
